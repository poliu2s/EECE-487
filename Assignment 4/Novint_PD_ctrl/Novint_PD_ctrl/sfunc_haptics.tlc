%% File : sfunc_haptics.tlc
%%
%% Description: 
%%   Real-Time Workshop TLC Code Generation file for sfunc_haptics
%%
%% Simulink version      : 6.5 (R2006b) 03-Aug-2006
%% TLC file generated on : 13-Jan-2010 17:16:34

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code_initialize;
     def.SFunctionName = 'sfunc_haptics';
     def.OutputFcnSpec = 'void falconPlant(double u1[3], double y1[3])';
     def.StartFcnSpec = 'createHaptics()';
     def.TerminateFcnSpec = 'deleteHaptics()';
     def.HeaderFiles = {'haptics.h'};
     def.SourceFiles = {'haptics.cpp'};
     def.HostLibFiles = {'hdl.lib'};
     def.TargetLibFiles = {'hdl.lib'};
     def.IncPaths = {'C:\Program Files\novint\HDAL_SDK_1.1.0_Beta\include'};
     def.LibPaths = {'C:\Program Files\novint\HDAL_SDK_1.1.0_Beta\lib'};
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     legacy_code_sfcn_tlc_generate(def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements sfunc_haptics "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C++
  %if ::GenCPP==0 && !IsModelReferenceSimTarget()
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
  %endif

  %if IsModelReferenceSimTarget()

    %openfile hFile = "sfunc_haptics_wrapper.h"
    %selectfile hFile
    #ifndef _SFUNC_HAPTICS_WRAPPER_H_
    #define _SFUNC_HAPTICS_WRAPPER_H_

    #include "tmwtypes.h"

    extern void sfunc_haptics_wrapper_start(void);

    extern void sfunc_haptics_wrapper_output( const real_T *u1,  real_T *y1);

    extern void sfunc_haptics_wrapper_terminate(void);

    #endif
    %closefile hFile

    %openfile cFile = "sfunc_haptics_wrapper.cpp"
    %selectfile cFile
    #include <string.h>
    #include "tmwtypes.h"
    #include "haptics.h"

    extern "C" {
    void sfunc_haptics_wrapper_start(void) {

      createHaptics();
    }
    } 

    extern "C" {
    void sfunc_haptics_wrapper_output( const real_T *u1,  real_T *y1) {


      falconPlant( u1, y1);

    }
    } 

    extern "C" {
    void sfunc_haptics_wrapper_terminate(void) {

      deleteHaptics();
    }
    } 

    %closefile cFile

    %<LibAddToCommonIncludes("sfunc_haptics_wrapper.h")>

  %else

    %<LibAddToCommonIncludes("haptics.h")>

  %endif

  %if !IsModelReferenceSimTarget()
    %<LibAddToModelSources("haptics")>
  %endif

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %if IsModelReferenceSimTarget()
  %else
    %<LibBlockSetIsExpressionCompliant(block)>
  %endif
  %%
%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%
  %if IsModelReferenceSimTarget()
    %%
    sfunc_haptics_wrapper_start();
  %else 
    %%
    createHaptics();
  %endif 
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
  %if IsModelReferenceSimTarget()
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
  %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
  %%
    sfunc_haptics_wrapper_output( %<u1_ptr>, %<y1_ptr>);
  %else 
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
    %%
    falconPlant( %<u1_ptr>, %<y1_ptr>);
  %endif 
  %%
%endfunction

%% Function: Terminate ====================================================
%%
%function Terminate(block, system) Output
  %%
  %if IsModelReferenceSimTarget()
    %%
    sfunc_haptics_wrapper_terminate();
  %else 
   %%
   deleteHaptics();
  %endif 
  %%
%endfunction

%% [EOF]
